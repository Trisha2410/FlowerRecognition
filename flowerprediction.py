# -*- coding: utf-8 -*-
"""FlowerPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L0yrKAK5SfkPzpcnBKlxtUGK018HBg4F
"""

import numpy as np
import os
import cv2
from sklearn.model_selection import train_test_split
import tensorflow.keras as keras
import pandas
import random
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

#Main Data
DATADIR="/content/drive/My Drive/Original"
folders=os.listdir(DATADIR)
print(folders)

from google.colab import drive
drive.mount('/content/drive')

flower_data=[]
label=[]
size=50,50

def save_features():    
    for flower in folders:
        print(flower)
        path=os.path.join(DATADIR,flower)
        for img in os.listdir(path):
            label.append(flower)            
            img_array=cv2.imread(os.path.join(path,img))
            new_array=cv2.resize(img_array,size)
            flower_data.append(new_array)
save_features()

flower_train=np.array(flower_data)
print(flower_train.shape)
flower_train=flower_train/255.0

label_dummies=pandas.get_dummies(label)
labels=label_dummies.values.argmax(1)
print(pandas.unique(labels))

X_train, X_test, y_train, y_test=train_test_split(flower_train,labels,test_size=0.2)

#Building Model
model=keras.Sequential()

#Adding hidden layers
#Change input shape as per the size used to read the images.
model.add(keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(50,50,3)))
model.add(keras.layers.MaxPooling2D((3,3),strides=(2,2),padding='same'))

model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPooling2D((2,2),strides=(1,1),padding='same'))

model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPooling2D((3,3),strides=(1,1),padding='same'))

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(64,activation='relu'))
model.add(keras.layers.BatchNormalization())

#Outout Layer
model.add(keras.layers.Dense(17,activation='softmax'))
 
#model compile
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

mod=model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=50)
test_error,test_accuracy=model.evaluate(X_test,y_test)
print ("\n validation accuracy is :", test_accuracy)
print ("\n validation error is :", test_error)

test_error,test_accuracy=model.evaluate(X_test,y_test)
print ("\n validation accuracy is :", test_accuracy)
print ("\n validation error is :", test_error)

print(mod.history.keys())

plt.plot(mod.history['accuracy'])
plt.plot(mod.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()


plt.plot(mod.history['loss'])
plt.plot(mod.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model.save("/content/drive/My Drive/finalmodel.h5")